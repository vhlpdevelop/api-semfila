const express = require('express');
const httpProxy = require('express-http-proxy');
const app = express();
require("dotenv").config()
const globalUsers = require("./resources/traficBus");
const { createWebhook } = require('./config/gerenciaNet.config')
const fs = require("fs");
const path = require('path');
const bodyParser = require("body-parser");
const db = require("./config/db");
const cors = require("cors");
const crypto = require("crypto");
const helmet = require('helmet')
const mongoSanitize = require("express-mongo-sanitize")
const httpsOptions = {
  cert: fs.readFileSync('/etc/letsencrypt/live/api-semfila.api-semfila.online/fullchain.pem'), // Certificado fullchain do dominio
  key: fs.readFileSync('/etc/letsencrypt/live/api-semfila.api-semfila.online/privkey.pem'), // Chave privada do domínio
  ca: fs.readFileSync(path.resolve(__dirname, `./config/certs/${process.env.GN_WEBHOOK}`)), // Certificado público da Gerencianet
  minVersion: "TLSv1.2",
  requestCert: true,
  rejectUnauthorized: false, //Mantenha como false para que os demais endpoints da API não rejeitem requisições sem MTLS
};

class Server {
  constructor() {
    this.app = express();
    this.port = 443;
    this.app.use(cors());
    this.app.use(helmet());
    this.app.use(mongoSanitize())
    this.app.disable('x-powered-by')
    this.app.use(bodyParser.json({ limit: '10mb' }));
    this.app.use(bodyParser.urlencoded({ extended: true, limit: '10mb' }));
    this.server = require("https").createServer(httpsOptions, this.app);
    const {
      ADMIN_PORT,
      FRONT_PORT,
      LOGIN_PORT,
      QRCODE_PORT,
      CRUD_PORT,
      ENTRANCE_PORT
    } = process.env;
    this.AdminServiceProxy = httpProxy('http://localhost:' + ADMIN_PORT);
    this.FrontServiceProxy = httpProxy('http://localhost:' + FRONT_PORT);
    this.LoginServiceProxy = httpProxy('http://localhost:' + LOGIN_PORT);
    this.QrCodeServiceProxy = httpProxy('http://localhost:' + QRCODE_PORT);
    this.CrudServiceProxy = httpProxy('http://localhost:' + CRUD_PORT);
    this.EntranceServiceProxy = httpProxy('http://localhost:' + ENTRANCE_PORT);
    this.app.use('/admin', (req, res, next) => AdminServiceProxy(req, res, next));
    this.app.use('/frontService', (req, res, next) => FrontServiceProxy(req, res, next));
    this.app.use('/auth', (req, res, next) => LoginServiceProxy(req, res, next));
    this.app.use('/qrcode', (req, res, next) => QrCodeServiceProxy(req, res, next));
    this.app.use('/crud', (req, res, next) => CrudServiceProxy(req, res, next));
    this.app.use('/payment', (req, res, next) => EntranceServiceProxy(req, res, next));



    this.server.listen('443', "0.0.0.0", () => {
      console.log(`Servidor rodando na porta 443`);
      createWebhook().then((output) => {
        console.log('webhook created.', output)
      })

    });



    const { QrcodeReturner, QrCodeReSend, afterRefund, notifications_api } = require("./Entrance_Service/controllers/pagamento.controllers");
    const { updateQrCode } = require("./QrCode_Service/controllers/qrCode.controllers")
    const middleware = require("./middleware/auth.middleware")

    //Cartão de crédito
    //Recebendo notificações.
    this.app.post("/notification_bill", (request, response) => {
      console.log(request.body) //REALIZAR GET SOB O NOTIFICATION TOKEN
      //METODO PARA ATENDER A NOTIFICAÇÃO
      notifications_api(request.body.notification, io)
      response.status(200).end();

    });

    //Pix
    this.app.post("/webhook", (request, response) => {
      // Verifica se a requisição que chegou nesse endpoint foi autorizada
      //console.log("Entrou aqui 1")
      if (request.client.authorized) {
        response.status(200).end();
      } else {
        response.status(401).end();
      }
    });

    this.app.post("/webhook/pix*", (req, res, next) => {
      //console.log("WEB HOOK RECEBIDO ")

      const { pix } = req.body
      if (!req.client.authorized) {
        return res.status(401).send('Invalid client certificate.');
      }
      if (pix) {
        for (const order of pix) {
          let aux = {
            object: order.txid
          }
          req.aux = aux

          //Só pode chamar caso for um pagamento.
          if (!order.devolucoes) {
            QrcodeReturner(req)
          }
          afterRefund(order) //Caso for reembolso.
        }
      }
      res.send({ ok: 1 })
    });
    //PIX
    const io = require("socket.io")(server, {
      cors: {
        origins: [],
      },
    });




    io.use((socket, next) => {
      const sessionID = socket.handshake.auth.sessionID;

      if (sessionID) {
        // find existing session


        socket.sessionID = sessionID;

        return next();

      }


      // create new session
      socket.sessionID = crypto.randomBytes(16).toString("hex");

      next();
    });
    io.sockets.on("connection", (socket) => { //Caso usuario não receba qrcode devera verificar no array
      socket.emit("session", {
        sessionID: socket.sessionID,
      });
      socket.join(socket.sessionID) //Insere o socket no server

      let index = globalUsers.findIndex(function (user) {
        return user.sessionID === socket.sessionID;
      });

      if (index > -1) {


        //Como nao recebi qrcode, reenviar.
        let aux = {
          index: index,
          sessionID: globalUsers[index].sessionID,
          dataToSave: globalUsers[index].dataToSave
        }
        //console.log("Enviou qrcode")
        QrCodeReSend(aux, io)
      }
    });
    this.app.set("socketio", io);

    this.app.post('/updateQrcode', async (req, res, next) => {
      middleware(req, res, next)
    }, async (req, res) => {
      var retorno = await updateQrCode(req)
      return res.send(retorno)
    });

    //Cache control
    const setCache = function (req, res, next) {
      const period = 60 * 2;
      if (req.method == "POST" || req.method == "GET") {
        res.set("Cache-control", `public, max-age=${period}`);
      } else {
        res.set("Cache-control", `no-store`);
      }
      next();
    }
    this.app.use(setCache)
  }
}




///////////////////////////////////////////////////////////////////////////ANTIGO 

const express = require('express');
const httpProxy = require('express-http-proxy');
const app = express();
require("dotenv").config()
const globalUsers = require("./resources/traficBus");
const {createWebhook} = require('./config/gerenciaNet.config')
const fs = require("fs");
const path = require('path');
const bodyParser = require("body-parser");
const db = require("./config/db");
const cors = require("cors");


const helmet = require('helmet')
const mongoSanitize = require("express-mongo-sanitize")
const httpsOptions = {
  cert: fs.readFileSync('/etc/letsencrypt/live/api-semfila.api-semfila.online/fullchain.pem'), // Certificado fullchain do dominio
  key: fs.readFileSync('/etc/letsencrypt/live/api-semfila.api-semfila.online/privkey.pem'), // Chave privada do domínio
  ca: fs.readFileSync(path.resolve(__dirname, `./config/certs/${process.env.GN_WEBHOOK}`)), // Certificado público da Gerencianet
  minVersion: "TLSv1.2",
  requestCert: true,
  rejectUnauthorized: false, //Mantenha como false para que os demais endpoints da API não rejeitem requisições sem MTLS
};
const port = 443;
app.use(cors());
app.use(helmet());
app.use(mongoSanitize())
app.disable('x-powered-by')
app.use(bodyParser.json({ limit: '30mb' }));
app.use(bodyParser.urlencoded({ extended: true, limit: '30mb' }));
var server = require("https").createServer(httpsOptions, app);
const {
  ADMIN_PORT,
  FRONT_PORT,
  LOGIN_PORT,
  QRCODE_PORT,
  CRUD_PORT,
  ENTRANCE_PORT
} = process.env;

const AdminServiceProxy = httpProxy('http://localhost:'+ADMIN_PORT);
const FrontServiceProxy = httpProxy('http://localhost:'+FRONT_PORT);
const LoginServiceProxy = httpProxy('http://localhost:'+LOGIN_PORT);
const QrCodeServiceProxy = httpProxy('http://localhost:'+QRCODE_PORT);
const CrudServiceProxy = httpProxy('http://localhost:'+CRUD_PORT);
const EntranceServiceProxy = httpProxy('http://localhost:'+ENTRANCE_PORT);

app.use('/admin', (req, res, next) => AdminServiceProxy(req, res, next));
/*
app.use('/payment',(req, res, next) => { //TESTE
  const allowedOrigins = ['https://semfila.app', 'https://semfila.tech'];
  const origin = req.headers.origin;
  if (allowedOrigins.includes(origin)) {
    res.setHeader('Access-Control-Allow-Origin', origin);
  }
  res.header('Access-Control-Allow-Methods', 'GET, OPTIONS');
  res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization');
  return EntranceServiceProxy(req, res, next);
});
*/
app.use('/frontService', (req, res, next) => FrontServiceProxy(req, res, next));
app.use('/auth', (req, res, next) => LoginServiceProxy(req, res, next));
app.use('/qrcode', (req, res, next) => QrCodeServiceProxy(req, res, next));
app.use('/crud', (req, res, next) => CrudServiceProxy(req, res, next));
app.use('/payment', (req, res, next) => EntranceServiceProxy(req, res, next));
const { QrcodeReturner, QrCodeReSend, afterRefund, notifications_api } = require ( "./Entrance_Service/controllers/pagamento.controllers");
const { updateQrCode } = require("./QrCode_Service/controllers/qrCode.controllers")
const middleware = require("./middleware/auth.middleware")

//Cartão de crédito
//Recebendo notificações.
app.post("/notification_bill", (request, response)=> {
  console.log(request.body) //REALIZAR GET SOB O NOTIFICATION TOKEN
  //METODO PARA ATENDER A NOTIFICAÇÃO
  notifications_api(request.body.notification, io)
  response.status(200).end();

});

//Pix
app.post("/webhook", (request, response) => { 
  // Verifica se a requisição que chegou nesse endpoint foi autorizada
  //console.log("Entrou aqui 1")
  if (request.client.authorized) { 
      response.status(200).end();
  } else {
      response.status(401).end();
  }
});

app.post("/webhook/pix*", (req, res, next) => {
  //console.log("WEB HOOK RECEBIDO ")
  
  const {pix} = req.body
  if (!req.client.authorized) {
    return res.status(401).send('Invalid client certificate.');
  }
  if(pix){
    for (const order of pix) {
      let aux = {
        object: order.txid
      }
      req.aux = aux
  
      //Só pode chamar caso for um pagamento.
      if(!order.devolucoes){
        QrcodeReturner(req)
      }
      afterRefund(order) //Caso for reembolso.
    }
  }
  res.send({ ok: 1 })
});
//PIX
const io = require("socket.io")(server, {
  cors: {
    origins: [],
  },
});

server.listen('443', "0.0.0.0", () => {
  console.log(`Servidor rodando na porta 443`);
  createWebhook().then((output) => {
    console.log('webhook created.', output)
  })

});
const crypto = require("crypto");
const authMiddleware = require('./middleware/auth.middleware');
io.use((socket, next) => {
  const sessionID = socket.handshake.auth.sessionID;
  
  if (sessionID) {
    // find existing session
    
   
      socket.sessionID = sessionID;
      
      return next();
    
  }


  // create new session
  socket.sessionID = crypto.randomBytes(16).toString("hex");
  
  next();
});
io.sockets.on("connection", (socket) => { //Caso usuario não receba qrcode devera verificar no array
  socket.emit("session", {
    sessionID: socket.sessionID,
  });
  socket.join(socket.sessionID) //Insere o socket no server
 
  let index = globalUsers.findIndex(function (user) {
    return user.sessionID === socket.sessionID;
  });

  if(index > -1){
   
   
    //Como nao recebi qrcode, reenviar.
    let aux = {
      index: index,
      sessionID: globalUsers[index].sessionID,
      dataToSave: globalUsers[index].dataToSave
    }
    //console.log("Enviou qrcode")
    QrCodeReSend(aux,io)
  }
});
app.set("socketio", io);

app.post('/updateQrcode',async (req,res,next) => {
  middleware(req,res,next)
}, async (req,res)=>{
  var retorno = await updateQrCode(req)
  return res.send(retorno)
});

//Cache control
const setCache = function (req, res, next){
  const period = 60*2;
  if(req.method == "POST"  || req.method == "GET"){
    res.set("Cache-control", `public, max-age=${period}`);
  }else{
    res.set("Cache-control", `no-store`);
  }
  next();
}
app.use(setCache)


//pay credit_card =================================================================================================================>>>>>>>>>>>>>>>>

  async payCreditCard(req, res) {
    var auth = "";
    var email = req.body.itemData.email;
  
    if (req.headers.authorization) {
      //AUTH
      const authHeader = JSON.parse(req.headers.authorization);
      //console.log(authHeader)
      if (!authHeader)
        return res.status(401).send({ msg: "Autenticação invalida!", error: 'Token não foi informado', success: false });

      const parts = authHeader.split(' ');

      if (!parts.length === 2)
        return res.status(401).send({ error: 'Token error', success: false, msg: 'Entre novamente' });

      const [scheme, token] = parts;

      if (!/^Bearer$/i.test(scheme))
        return res.status(401).send({ error: 'Token formato inválido', success: false, msg: 'Entre novamente' });

      jwt.verify(token, authConfig.secret, (err, decoded) => {
        if (err) return res.status(401).send({ error: 'Token inválido', success: false, msg: 'Entre novamente' });

        req.userID = decoded.id;
        req.userEmail = decoded.email

      })
      auth = req.userID
      email = req.userEmail
    }
    //Se usuário está autenticado, então.
    if (email === "") {
      return res.send({
        success: false,
        msg: "Por favor, insira seu email."
      })
    }

    const socketId = req.body.idSocket;

    process.stdout.write("\033c");


    if (!req.body.itemData) {
      return res.send({
        success: false,
        msg: "Carrinho vazio."
      })
    }
    const dados = req.body.itemData;
    //Primeiro autenticar os dados, verificar items
    try {
      var items = [];
      var items_second = [];
      var pag = 0;
      var pag_second = 0;
      var desconto = 0;
      //VERIFICAR SE STORE EXISTE PRIMEIRO
      let store = await storeModel.findById(dados.store_id);

      if (store._id !== undefined) {
        for (let i = 0; i < dados.cart.length; i++) {
          let itemChecker = await itemsModel.findById({
            _id: dados.cart[i]._id,
          });
          if (itemChecker !== undefined) {
            if (itemChecker.limit_switch) {
              if (itemChecker.limit_number - dados.cart[i].qtd < 0) {
                return res.send({
                  success: false,
                  msg: itemChecker.item_name + " sobrou apenas: " + itemChecker.limit_number + "un.",
                  obj: itemChecker._id,
                })
              }
            }
            //Este item existe. Guardar ele em uma variavel diferente para não haver discrepancias nos dados.
            itemChecker.qtd = dados.cart[i].qtd;

            var duration = 0;
            if (itemChecker.promotion) {
              //Se ele estiver em uma promoção, tem tempo de vida
              duration = parseFloat(itemChecker.promotion_duration) * 24;
            } else {
              itemChecker.duration = 4380;
            }
            pag_second = parseFloat(itemChecker.price).toFixed(2)
            if (itemChecker.discount_status) {
              desconto =
                (parseFloat(desconto) +
                  parseFloat(itemChecker.discount_value)) *
                dados.cart[i].qtd;
              desconto = desconto.toFixed(2);
              pag_second = pag_second - desconto;
            }
            pag = pag + itemChecker.price * dados.cart[i].qtd;
        
            let aux_value = parseInt(pag_second.replace(/[`~!@#$%^&*()_|+\-=?;:'",.<>\{\}\[\]\\\/]/gi, '')) // 25.00 => 2500
            //console.log(aux_value)
            items_second.push({
              name: itemChecker.item_name,
              value: aux_value,
              amount: dados.cart[i].qtd
            }
            )
            let aux_pusher = {
              _id: itemChecker._id,
              item_name: itemChecker.item_name,
              description: itemChecker.description,
              type: itemChecker.type,
              image_url: itemChecker.image_url,
              price: itemChecker.price,
              ncm: itemChecker.ncm,
              icms: itemChecker.icms,
              qtd: dados.cart[i].qtd,
              category_id: itemChecker.category_id,
              company_id: itemChecker.company_id,
              promotion: itemChecker.promotion,
              discount_status: itemChecker.discount_status,
              discount_value: itemChecker.discount_value,
              promotion_duration: itemChecker.promotion_duration,
              duration: duration,
              destaques: itemChecker.destaques,
            };
            items.push(aux_pusher);
          }
        }

        pag = pag.toFixed(2);
        pag = parseFloat(pag) - parseFloat(desconto);
        pag = pag.toFixed(2);
        //console.log(dados);

        if (items.length > 0) {
          //Verificar se existe um pedido com o mesmo email e o mesmo valor, caso sim diminua em 1 centavo.
          const pedidoChecker = await pedidosModel.findOne({price: pag.toString(), user_email: email, transaction_status:"Credito pago"}); //Caso seja pago entao busque
          if(pedidoChecker){
            //Reconstrua os valores.
            var valor = 0;
            for(let i = 0; i< items_second.length; i++){
              valor = parseFloat(items_second[i].value) / 100; //2500 => 25.00
              valor = valor - 0.01 //25.00 => 24.99
             
              valor = valor.toString()
              let aux_value = parseInt(valor.replace(/[`~!@#$%^&*()_|+\-=?;:'",.<>\{\}\[\]\\\/]/gi, '')) //24.99 => 2499
       
              items_second[i].value = aux_value
            }

            
            pag = parseFloat(pag) - 0.01
            
          }
          console.log(pag)
          //Se existir items validados continue
          //CRIAR UM PEDIDO COM OS ITEMS
          let object = {
            items: items,
            user_email: email,
            socket: socketId,
            user_id: auth,
            txid: "",
            price: pag.toString(), //
            payment: "credit_card",
            store_id: dados.store_id,
            store_name: store.name,
            company_id: dados.company_id,
          };
          const pedido = await pedidosModel.create(object);

          if (pedido) {
            //Criar um link de pagamento.

            var options = {

              client_id: process.env.GN_CLIENT_ID,
              client_secret: process.env.GN_CLIENT_SECRET,
              sandbox: false,
            }


            //expire_at
            var today = new Date(Date.now())
            today.setDate(today.getDate() + 1)
            var todayDate = new Date(today).toISOString().slice(0, 10);
            var body = {
              items: items_second,
              metadata: {
                custom_id: pedido._id,
                notification_url: "https://api-semfila.api-semfila.online/notification_bill"
              },
              settings: {
                message: `Obrigado por comprar com a SemFila, seu número do pedido é ${pedido._id}.`,
                payment_method: "credit_card",
                request_delivery_address: false,
                expire_at: todayDate
              }
            }
            //OPTIONS
            let params = {
              id: 0,
            }
            var cobResponse = '';
            const gerencianet = new Gerencianet(options);
            await gerencianet.createOneStepLink(params, body)
              .then((resposta) => {
                if (resposta.code === 200) {
                  cobResponse = resposta
                }
              })
              .catch((error) => {
                console.log(error)
              })
            //Atualizar pedido.
            if (cobResponse.code === 200) {
              pedido.charge_id = cobResponse.data.charge_id
              pedido.markModified('charge_id')
              pedido.save();
              return res.send({
                success: true,
                msg: "Transferindo para o pagamento",
                url: cobResponse.data.payment_url,
                obj_pedido: pedido._id
              });
            } else {
              return res.send({
                success: false,
                msg: "Não foi possivel gerar pagamento.",

              });
            }

          }

        } else {
          //Retorne, carrinho está vazio ou os itens não existem
          return res.send({
            success: false,
            msg: "Itens no carrinho não existentes",
            obj: null,
          });
        }
      } else {
        return res.send({
          success: false,
          msg: "Loja não existe",
          obj: null,
        });
      }
    } catch (e) {
      console.log(e);
      return res.send({
        success: false,
        msg: "Ops, ocorreu um erro",
        obj: null,
      });
    }
  },